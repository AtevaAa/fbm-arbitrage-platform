"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Brain, TrendingUp, AlertTriangle, CheckCircle, Lightbulb } from "lucide-react";

export default function ProfitCalculator() {
  const [salePrice, setSalePrice] = useState(25);
  const [costPrice, setCostPrice] = useState(12);
  const [shipping, setShipping] = useState(3);
  const [amazonFee, setAmazonFee] = useState(15);
  const [quantity, setQuantity] = useState([10]);
  const [showAssistant, setShowAssistant] = useState(false);

  // –†–∞—Å—á–µ—Ç—ã
  const amazonFeeAmount = (salePrice * amazonFee) / 100;
  const totalCosts = costPrice + shipping + amazonFeeAmount;
  const profitPerItem = salePrice - totalCosts;
  const profitMargin = (profitPerItem / salePrice) * 100;
  const totalProfit = profitPerItem * quantity[0];
  const totalRevenue = salePrice * quantity[0];

  const getProfitColor = (margin: number) => {
    if (margin >= 30) return "text-green-400";
    if (margin >= 20) return "text-yellow-400";
    if (margin >= 10) return "text-orange-400";
    return "text-red-400";
  };

  const getProfitBadge = (margin: number) => {
    if (margin >= 30) return { text: "–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", color: "bg-green-500/20 text-green-300 border-green-500/30" };
    if (margin >= 20) return { text: "–•–æ—Ä–æ—à–∞—è –ø—Ä–∏–±—ã–ª—å", color: "bg-yellow-500/20 text-yellow-300 border-yellow-500/30" };
    if (margin >= 10) return { text: "–ù–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å", color: "bg-orange-500/20 text-orange-300 border-orange-500/30" };
    return { text: "–£–±—ã—Ç–æ—á–Ω–æ", color: "bg-red-500/20 text-red-300 border-red-500/30" };
  };

  // AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏
  const getAIRecommendations = () => {
    const recommendations = [];
    const warnings = [];
    const insights = [];

    // –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if (profitMargin < 15) {
      warnings.push({
        icon: AlertTriangle,
        title: "–ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
        text: "–ú–∞—Ä–∂–∞ –º–µ–Ω–µ–µ 15% - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —É–±—ã—Ç–∫–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω"
      });
      recommendations.push("–ù–∞–π–¥–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã —Å –±–æ–ª—å—à–µ–π –Ω–∞—Ü–µ–Ω–∫–æ–π");
    }

    if (profitMargin >= 30) {
      insights.push({
        icon: CheckCircle,
        title: "–û—Ç–ª–∏—á–Ω–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
        text: "–ú–∞—Ä–∂–∞ –≤—ã—à–µ 30% - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞"
      });
      recommendations.push("–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π –ø—Ä–æ–¥–∞–∂–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —É–≤–µ–ª–∏—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ");
    }

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–∏ Amazon
    if (amazonFee > 20) {
      warnings.push({
        icon: AlertTriangle,
        title: "–í—ã—Å–æ–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è Amazon",
        text: "–ö–æ–º–∏—Å—Å–∏—è –≤—ã—à–µ 20% —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å"
      });
      recommendations.push("–†–∞—Å—Å–º–æ—Ç—Ä–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö —Å –º–µ–Ω—å—à–µ–π –∫–æ–º–∏—Å—Å–∏–µ–π (Books, Media - 15%)");
    }

    // –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∞–≤–∫–∏
    const shippingPercent = (shipping / salePrice) * 100;
    if (shippingPercent > 15) {
      warnings.push({
        icon: AlertTriangle,
        title: "–î–æ—Ä–æ–≥–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
        text: "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ 15% –æ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"
      });
      recommendations.push("–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ª–æ–≥–∏—Å—Ç–∏–∫—É –∏–ª–∏ –Ω–∞–π–¥–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π");
    }

    // –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
    if (totalProfit < 500) {
      insights.push({
        icon: TrendingUp,
        title: "–ú–∞–ª—ã–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂",
        text: "–î–ª—è —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–ª–∏—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–π–¥–∏ –±–æ–ª–µ–µ –¥–æ—Ä–æ–≥–∏–µ —Ç–æ–≤–∞—Ä—ã"
      });
      recommendations.push("–°—Ç—Ä–µ–º–∏—Å—å –∫ –º–µ—Å—è—á–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –æ—Ç $1000 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞");
    }

    if (totalProfit > 2000) {
      insights.push({
        icon: CheckCircle,
        title: "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª",
        text: "–ü—Ä–∏ —Ç–∞–∫–æ–π –ø—Ä–∏–±—ã–ª–∏ —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –¥–µ–Ω—å–≥–∏"
      });
      recommendations.push("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –Ω–∞–π–º–∏—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞");
    }

    // –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if (salePrice < 15) {
      warnings.push({
        icon: AlertTriangle,
        title: "–ù–∏–∑–∫–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞",
        text: "–¢–æ–≤–∞—Ä—ã –¥–æ $15 —á–∞—Å—Ç–æ –∏–º–µ—é—Ç –Ω–∏–∑–∫—É—é –ø—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"
      });
      recommendations.push("–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä–∞—Ö –æ—Ç $20 –¥–æ $100 –¥–ª—è –ª—É—á—à–µ–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏");
    }

    if (salePrice > 100) {
      insights.push({
        icon: Lightbulb,
        title: "–î–æ—Ä–æ–≥–æ–π —Ç–æ–≤–∞—Ä",
        text: "–î–æ—Ä–æ–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –º–µ–Ω—å—à–∏–π —Å–ø—Ä–æ—Å, –Ω–æ –±–æ–ª—å—à—É—é –ø—Ä–∏–±—ã–ª—å —Å –µ–¥–∏–Ω–∏—Ü—ã"
      });
      recommendations.push("–£–±–µ–¥–∏—Å—å, —á—Ç–æ –µ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º —Ü–µ–Ω–æ–≤–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ");
    }

    return { recommendations, warnings, insights };
  };

  const badge = getProfitBadge(profitMargin);
  const aiAnalysis = getAIRecommendations();

  return (
    <div className="space-y-6">
      <Card className="bg-gradient-to-b from-gray-900 to-black border-gray-800 hover:border-gray-700 transition-all duration-300">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-3">
            <span className="w-8 h-8 bg-gradient-to-r from-green-500 to-blue-600 rounded-full flex items-center justify-center text-sm">üßÆ</span>
            –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ FBM
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <Label htmlFor="salePrice" className="text-white">–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ Amazon ($)</Label>
                <Input
                  id="salePrice"
                  type="number"
                  value={salePrice}
                  onChange={(e) => setSalePrice(Number(e.target.value))}
                  className="bg-gray-800 border-gray-700 text-white mt-1"
                  min="0"
                  step="0.01"
                />
              </div>

              <div>
                <Label htmlFor="costPrice" className="text-white">–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏ ($)</Label>
                <Input
                  id="costPrice"
                  type="number"
                  value={costPrice}
                  onChange={(e) => setCostPrice(Number(e.target.value))}
                  className="bg-gray-800 border-gray-700 text-white mt-1"
                  min="0"
                  step="0.01"
                />
              </div>

              <div>
                <Label htmlFor="shipping" className="text-white">–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –∫–ª–∏–µ–Ω—Ç–∞ ($)</Label>
                <Input
                  id="shipping"
                  type="number"
                  value={shipping}
                  onChange={(e) => setShipping(Number(e.target.value))}
                  className="bg-gray-800 border-gray-700 text-white mt-1"
                  min="0"
                  step="0.01"
                />
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <Label htmlFor="amazonFee" className="text-white">–ö–æ–º–∏—Å—Å–∏—è Amazon (%)</Label>
                <div className="mt-2">
                  <Slider
                    value={[amazonFee]}
                    onValueChange={(value) => setAmazonFee(value[0])}
                    max={25}
                    min={8}
                    step={0.5}
                    className="w-full"
                  />
                  <div className="flex justify-between text-sm text-gray-400 mt-1">
                    <span>8%</span>
                    <span className="text-white font-medium">{amazonFee}%</span>
                    <span>25%</span>
                  </div>
                </div>
              </div>

              <div>
                <Label htmlFor="quantity" className="text-white">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–µ—Å—è—Ü</Label>
                <div className="mt-2">
                  <Slider
                    value={quantity}
                    onValueChange={setQuantity}
                    max={200}
                    min={1}
                    step={1}
                    className="w-full"
                  />
                  <div className="flex justify-between text-sm text-gray-400 mt-1">
                    <span>1</span>
                    <span className="text-white font-medium">{quantity[0]} —à—Ç</span>
                    <span>200</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ */}
          <div className="bg-gradient-to-r from-blue-900/20 to-purple-900/20 rounded-xl p-6 border border-blue-500/30">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-xl font-bold text-white">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞</h3>
              <Badge className={badge.color}>
                {badge.text}
              </Badge>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-400">–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</span>
                  <span className="text-white font-medium">${salePrice.toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏:</span>
                  <span className="text-white font-medium">${costPrice.toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                  <span className="text-white font-medium">${shipping.toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–ö–æ–º–∏—Å—Å–∏—è Amazon:</span>
                  <span className="text-white font-medium">${amazonFeeAmount.toFixed(2)}</span>
                </div>
                <hr className="border-gray-600" />
                <div className="flex justify-between">
                  <span className="text-gray-400">–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</span>
                  <span className="text-white font-medium">${totalCosts.toFixed(2)}</span>
                </div>
              </div>

              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-400">–ü—Ä–∏–±—ã–ª—å —Å –µ–¥–∏–Ω–∏—Ü—ã:</span>
                  <span className={`font-bold ${getProfitColor(profitMargin)}`}>
                    ${profitPerItem.toFixed(2)}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</span>
                  <span className={`font-bold ${getProfitColor(profitMargin)}`}>
                    {profitMargin.toFixed(1)}%
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                  <span className="text-white font-medium">{quantity[0]} —à—Ç</span>
                </div>
                <hr className="border-gray-600" />
                <div className="flex justify-between">
                  <span className="text-gray-400">–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</span>
                  <span className="text-blue-400 font-bold">${totalRevenue.toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
                  <span className={`font-bold text-lg ${getProfitColor(profitMargin)}`}>
                    ${totalProfit.toFixed(2)}
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ */}
          <div className="flex justify-center">
            <Button
              onClick={() => setShowAssistant(!showAssistant)}
              className="bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white px-6 py-3 rounded-full font-medium transition-all duration-300 hover:scale-105 shadow-lg"
            >
              <Brain className="w-5 h-5 mr-2" />
              {showAssistant ? "–°–∫—Ä—ã—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞" : "–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ AI"}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç */}
      {showAssistant && (
        <Card className="bg-gradient-to-b from-purple-900/20 to-pink-900/20 border-purple-500/30 animate-scale-in">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-3">
              <Brain className="w-8 h-8 text-purple-400" />
              AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏
              <Badge className="bg-purple-500/20 text-purple-300 border-purple-500/30">
                Beta
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
            {aiAnalysis.warnings.length > 0 && (
              <div className="space-y-3">
                <h4 className="text-lg font-semibold text-red-400 flex items-center gap-2">
                  <AlertTriangle className="w-5 h-5" />
                  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                </h4>
                {aiAnalysis.warnings.map((warning, index) => (
                  <div key={index} className="bg-red-900/20 border border-red-500/30 rounded-lg p-4 flex items-start gap-3">
                    <warning.icon className="w-5 h-5 text-red-400 mt-0.5 flex-shrink-0" />
                    <div>
                      <h5 className="font-semibold text-red-300">{warning.title}</h5>
                      <p className="text-red-200 text-sm">{warning.text}</p>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* –ò–Ω—Å–∞–π—Ç—ã */}
            {aiAnalysis.insights.length > 0 && (
              <div className="space-y-3">
                <h4 className="text-lg font-semibold text-blue-400 flex items-center gap-2">
                  <Lightbulb className="w-5 h-5" />
                  –ê–Ω–∞–ª–∏–∑ –∏ –∏–Ω—Å–∞–π—Ç—ã
                </h4>
                {aiAnalysis.insights.map((insight, index) => (
                  <div key={index} className="bg-blue-900/20 border border-blue-500/30 rounded-lg p-4 flex items-start gap-3">
                    <insight.icon className="w-5 h-5 text-blue-400 mt-0.5 flex-shrink-0" />
                    <div>
                      <h5 className="font-semibold text-blue-300">{insight.title}</h5>
                      <p className="text-blue-200 text-sm">{insight.text}</p>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
            <div className="space-y-3">
              <h4 className="text-lg font-semibold text-green-400 flex items-center gap-2">
                <CheckCircle className="w-5 h-5" />
                –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </h4>
              <div className="bg-green-900/20 border border-green-500/30 rounded-lg p-4">
                <ul className="space-y-2">
                  {aiAnalysis.recommendations.map((recommendation, index) => (
                    <li key={index} className="text-green-200 text-sm flex items-start gap-2">
                      <span className="text-green-400 mt-1">‚Ä¢</span>
                      {recommendation}
                    </li>
                  ))}
                </ul>
              </div>
            </div>

            {/* –û–±—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç */}
            <div className="bg-gradient-to-r from-purple-900/40 to-pink-900/40 border border-purple-500/30 rounded-lg p-4">
              <h4 className="text-lg font-semibold text-purple-300 mb-2">üéØ –û–±—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç:</h4>
              <p className="text-purple-200 text-sm">
                {profitMargin >= 25
                  ? "–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è FBM –∞—Ä–±–∏—Ç—Ä–∞–∂–∞! –í—ã—Å–æ–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å."
                  : profitMargin >= 15
                  ? "–ù–µ–ø–ª–æ—Ö–æ–π —Ç–æ–≤–∞—Ä, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. –†–∞–±–æ—Ç–∞–π –Ω–∞–¥ —Å–Ω–∏–∂–µ–Ω–∏–µ–º –∑–∞—Ç—Ä–∞—Ç."
                  : "–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –ª—É—á—à–µ –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Å –±–æ–ª—å—à–µ–π –ø—Ä–∏–±—ã–ª—å—é."
                }
              </p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
